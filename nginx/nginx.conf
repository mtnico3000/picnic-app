# Nginx configuration for Picnic App

# Define the user that will own and run the Nginx server
user  nginx;
# Define the number of worker processes; recommended value is the number of cores available
worker_processes  auto;

# Define the location on the file system of the error log
error_log  /var/log/nginx/error.log warn;
# Define the location of the PID file that will store the process ID of the master process
pid        /var/run/nginx.pid;

# Events block defines the parameters that affect connection processing
events {
    # Define the maximum number of simultaneous connections that can be opened by a worker process
    worker_connections  1024;
}

# HTTP block defines the parameters for HTTP connections
http {
    # Include the file defining MIME types
    include       /etc/nginx/mime.types;
    # Define the default MIME type of a response
    default_type  application/octet-stream;

    # Define the format of log messages
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Define the location of the access log
    access_log  /var/log/nginx/access.log  main;

    # Enable sending files using sendfile
    sendfile        on;
    # Enable the TCP_NOPUSH option for sendfile
    tcp_nopush     on;
    # Enable the TCP_NODELAY option
    tcp_nodelay    on;

    # Define the timeout for keep-alive connections
    keepalive_timeout  65;

    # Enable gzip compression
    gzip  on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Virtual Host configuration for picnic-app
    server {
        # Listen on port 80
        listen 80;
        # Define the server name
        server_name picnic-app.example.com;

        # Redirect all HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        # Listen on port 443 for HTTPS connections
        listen 443 ssl;
        # Define the server name
        server_name picnic-app.example.com;

        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/picnic-app.crt;
        ssl_certificate_key /etc/nginx/ssl/picnic-app.key;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()" always;

        # Define the root directory for the server
        root /usr/share/nginx/html;
        index index.html;

        # Proxy requests to the Node.js application
        location / {
            proxy_pass http://app:3001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Serve static files directly
        location /public/ {
            alias /usr/src/app/public/;
            expires 1d;
            add_header Cache-Control "public";
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
